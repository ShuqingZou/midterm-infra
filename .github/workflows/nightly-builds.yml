name: Nightly Build and Deployment

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  create-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create.outputs.instance_id }}
      instance_ip: ${{ steps.create.outputs.instance_ip }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Launch temporary EC2 instance
        id: create
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --region us-east-1 \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t3.micro \
            --key-name midterm-key \
            --security-group-ids sg-03a57241aa0650326 \
            --subnet-id subnet-037010f619e30f145 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Waiting for EC2 instance ($INSTANCE_ID) to get Public DNS..."

          while true; do
            INSTANCE_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicDnsName' \
              --output text)

            if [[ "$INSTANCE_IP" != "None" && "$INSTANCE_IP" != "" ]]; then
              break
            fi

            echo "Waiting for Public DNS..."
            sleep 5
          done

          echo "Instance ID: $INSTANCE_ID"
          echo "Instance IP: $INSTANCE_IP"

          echo "::set-output name=instance_id::$INSTANCE_ID"
          echo "::set-output name=instance_ip::$INSTANCE_IP"

  build-and-test:
    needs: create-ec2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: ShuqingZou/midterm-source
          token: ${{ secrets.SOURCE_REPO_PAT }}

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and tag backend Docker image
        run: |
          docker build -t backend-nightly:latest ./backend
          docker save -o backend-nightly.tar backend-nightly:latest

      - name: Build and tag frontend Docker image
        run: |
          docker build -t frontend-nightly:latest ./frontend
          docker save -o frontend-nightly.tar frontend-nightly:latest

      - name: Upload Docker Images as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            backend-nightly.tar
            frontend-nightly.tar
  

  smoke-test:
    needs: [create-ec2, build-and-test]
    runs-on: ubuntu-latest

    steps:
      - name: Debug Instance IP in smoke-test
        run: |
          echo "Instance ID in smoke-test: ${{ needs.create-ec2.outputs.instance_id }}"
          echo "Instance IP in smoke-test: ${{ needs.create-ec2.outputs.instance_ip }}"

      - name: Wait for EC2 to be ready
        run: sleep 60

      - name: SSH into EC2 and run Smoke Test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.create-ec2.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo apt update && sudo apt install -y docker.io docker-compose git
            sudo systemctl start docker
            sudo usermod -aG docker $USER
            newgrp docker
            sleep 10

            if [ ! -d "/home/ubuntu/midterm-source" ]; then
              git clone https://github.com/ShuqingZou/midterm-source.git /home/ubuntu/midterm-source
            fi

            cd /home/ubuntu/midterm-source
            git pull origin main

            echo "Logging in to Amazon ECR"
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 910051580567.dkr.ecr.us-east-1.amazonaws.com

            echo "Pulling latest Docker images from ECR"
            docker pull 910051580567.dkr.ecr.us-east-1.amazonaws.com/backend-nightly:latest
            docker pull 910051580567.dkr.ecr.us-east-1.amazonaws.com/frontend-nightly:latest

            export DB_HOST="mysql-db.cdegrojvvejq.us-east-1.rds.amazonaws.com"
            export DB_USER="root"
            export DB_PASSWORD="164450zsq"
            export DB_NAME="test"
            export DB_PORT="3306"

            echo "Starting services with Docker Compose..."
            docker-compose up -d

            echo "Checking running containers..."
            docker ps -a

            echo "Running Smoke Tests..."
            curl -f http://localhost:8800/ || exit 1
            curl -f http://localhost:8800/books || exit 1
  
  

  push-to-ecr:
    needs: smoke-test
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Images
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i backend-nightly.tar
          docker load -i frontend-nightly.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 910051580567.dkr.ecr.us-east-1.amazonaws.com

      - name: Tag and Push Backend Image
        run: |
          docker tag backend-nightly:latest 910051580567.dkr.ecr.us-east-1.amazonaws.com/backend-nightly:latest
          docker push 910051580567.dkr.ecr.us-east-1.amazonaws.com/backend-nightly:latest

      - name: Tag and Push Frontend Image
        run: |
          docker tag frontend-nightly:latest 910051580567.dkr.ecr.us-east-1.amazonaws.com/frontend-nightly:latest
          docker push 910051580567.dkr.ecr.us-east-1.amazonaws.com/frontend-nightly:latest


  deploy-to-qa:
    needs: [create-ec2, push-to-ecr]
    runs-on: ubuntu-latest

    steps:
      - name: Debug Deployment Instance
        run: |
          echo "Deploying to QA Server: ${{ needs.create-ec2.outputs.instance_ip }}"

      - name: Set instance_ip as environment variable
        run: echo "INSTANCE_IP=${{ needs.create-ec2.outputs.instance_ip }}" >> $GITHUB_ENV

      - name: SSH into QA EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: "${{ env.INSTANCE_IP }}"
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "Logging in to Amazon ECR"
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 910051580567.dkr.ecr.us-east-1.amazonaws.com

            echo "Pulling latest images from ECR"
            docker pull 910051580567.dkr.ecr.us-east-1.amazonaws.com/backend-nightly:latest
            docker pull 910051580567.dkr.ecr.us-east-1.amazonaws.com/frontend-nightly:latest

            echo "Stopping and removing old containers"
            docker stop backend-container frontend-container || true
            docker rm backend-container frontend-container || true

            echo "Removing unused images to free space"
            docker system prune -af || true

            echo "Starting new containers"
            docker run -d --name backend-container -p 8800:8800 -e DB_HOST="mysql-db.cdegrojvvejq.us-east-1.rds.amazonaws.com" \
              -e DB_USER="root" -e DB_PASSWORD="164450zsq" -e DB_NAME="test" -e DB_PORT="3306" \
              910051580567.dkr.ecr.us-east-1.amazonaws.com/backend-nightly:latest

            docker run -d --name frontend-container -p 3000:3000 \
              910051580567.dkr.ecr.us-east-1.amazonaws.com/frontend-nightly:latest

            echo "Deployment completed!"

