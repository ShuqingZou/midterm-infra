name: Nightly Build and Deployment

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  nightly-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: ShuqingZou/midterm-source
          token: ${{ secrets.SOURCE_REPO_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and tag Docker images
        run: |
          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          docker build -t backend:$TIMESTAMP -t backend:latest ./backend
          docker save -o backend.tar backend:$TIMESTAMP

          docker build -t frontend:$TIMESTAMP -t frontend:latest ./frontend
          docker save -o frontend.tar frontend:$TIMESTAMP

      - name: Push Docker Images to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          docker tag backend:$TIMESTAMP ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:$TIMESTAMP
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:$TIMESTAMP

          docker tag frontend:$TIMESTAMP ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:$TIMESTAMP
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:$TIMESTAMP

      - name: Launch Temporary EC2 Instance
        id: create_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ${{ secrets.AWS_REGION }} \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t2.micro \
            --key-name midterm-key \
            --security-group-ids sg-03a57241aa0650326 \
            --subnet-id subnet-037010f619e30f145 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Launched EC2 Instance: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          INSTANCE_IP=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)

          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Debug EC2 Instance Details
        run: |
          echo "Instance ID: $INSTANCE_ID"
          echo "Instance IP: $INSTANCE_IP"
          aws ec2 describe-instances --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_REGION }} --query 'Reservations[0].Instances[0].StateReason' --output json

      - name: Run Smoke Test on EC2
        id: smoke_test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo apt update && sudo apt install -y docker.io docker-compose git
            sudo systemctl start docker

            export REACT_APP_API_URL=http://localhost:8800
            
            DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="root"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_NAME="test"
            export DB_PORT="3306"

            echo "DB_HOST is set to: $DB_HOST"

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:$TIMESTAMP
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:$TIMESTAMP
            sudo docker-compose up -d
            sleep 20

            echo "Running Smoke Tests..."
            curl -f http://localhost:8800/ || exit 1
            curl -f http://localhost:8800/books || exit 1
            curl -f http://localhost:3000/ || exit 1

      - name: Delete Images from ECR if Smoke Test Fails
        if: failure()
        run: |
          echo "Smoke test failed. Cleaning up images from ECR..."
          aws ecr batch-delete-image --repository-name bookapp/backend --image-ids imageTag=$TIMESTAMP
          aws ecr batch-delete-image --repository-name bookapp/frontend --image-ids imageTag=$TIMESTAMP

      - name: Terminate Temporary EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --region ${{ secrets.AWS_REGION }} --instance-ids $INSTANCE_ID
