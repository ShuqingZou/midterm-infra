name: Nightly Build and Deployment

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.generate_tag.outputs.timestamp }}  # 传递给后续 Job
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: ShuqingZou/midterm-source
          token: ${{ secrets.SOURCE_REPO_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Timestamp Tag
        id: generate_tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "::set-output name=timestamp::$TIMESTAMP" 
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_ENV"

      - name: Build Docker Images
        run: |
          docker build -t backend-nightly:${{ env.TIMESTAMP }} ./backend
          docker build -t frontend-nightly:${{ env.TIMESTAMP }} ./frontend

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push to Amazon ECR
        run: |
          docker tag backend-nightly:${{ env.TIMESTAMP }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:${{ env.TIMESTAMP }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:${{ env.TIMESTAMP }}
          
          docker tag frontend-nightly:${{ env.TIMESTAMP }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:${{ env.TIMESTAMP }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:${{ env.TIMESTAMP }}

  create-ec2:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create_ec2.outputs.instance_id }}
      instance_ip: ${{ steps.create_ec2.outputs.instance_ip }}
    needs: build-and-push
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch temporary EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ${{ secrets.AWS_REGION }} \
            --image-id ami-04b4f1a9cf54c11d0 \
            --instance-type t3.micro \
            --key-name midterm-key \
            --security-group-ids sg-03a57241aa0650326 \
            --subnet-id subnet-037010f619e30f145 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "Waiting for EC2 instance to get Public DNS..."
          sleep 20

          INSTANCE_IP=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)

          echo "EC2 Instance ID: $INSTANCE_ID"
          echo "EC2 Instance IP: $INSTANCE_IP"

          echo "instance_id=$INSTANCE_ID" >> "$GITHUB_OUTPUT"
          echo "instance_ip=$INSTANCE_IP" >> "$GITHUB_OUTPUT"

  smoke-test:
    needs: [create-ec2, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Debug Instance IP
        run: |
          echo "Received Instance ID: ${{ needs.create-ec2.outputs.instance_id }}"
          echo "Received Instance IP: ${{ needs.create-ec2.outputs.instance_ip }}"

      - name: SSH into EC2 and run Smoke Test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.create-ec2.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo apt update && sudo apt install -y docker.io docker-compose awscli
            sudo systemctl start docker

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:${{ needs.build-and-push.outputs.timestamp }}
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:${{ needs.build-and-push.outputs.timestamp }}
            
            sudo docker-compose up -d

            sleep 30

            curl -f http://localhost:8800/ || exit 1
            curl -f http://localhost:8800/books || exit 1
            curl -f http://localhost:3000/ || exit 1


  cleanup-ecr:
    needs: smoke-test
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Delete failed images from ECR
        run: |
          aws ecr batch-delete-image --repository-name bookapp/backend --image-ids imageTag=${{ needs.build-and-push.outputs.timestamp }} || true
          aws ecr batch-delete-image --repository-name bookapp/frontend --image-ids imageTag=${{ needs.build-and-push.outputs.timestamp }} || true

  deploy-qa:
    needs: smoke-test
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SSH into QA EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.QA_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying version: ${{ needs.build-and-push.outputs.timestamp }}"

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            sudo docker-compose down || true
            
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/backend:${{ needs.build-and-push.outputs.timestamp }}
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/bookapp/frontend:${{ needs.build-and-push.outputs.timestamp }}

            sudo docker-compose up -d


  cleanup:
    needs: [ create-ec2, smoke-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug Instance ID before termination
        run: |
          echo "Instance ID: ${{ needs.create-ec2.outputs.instance_id }}"

      - name: Terminate temporary EC2 instance
        run: |
          INSTANCE_ID="${{ needs.create-ec2.outputs.instance_id }}"
          
          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: No instance ID found. Skipping termination."
            exit 1
          fi
          
          aws ec2 terminate-instances --region ${{ secrets.AWS_REGION }} --instance-ids $INSTANCE_ID